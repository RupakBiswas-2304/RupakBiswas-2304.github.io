<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 20 Oct 2023 09:03:20 -0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>/about/me/</link><pubDate>Fri, 20 Oct 2023 09:03:20 -0800</pubDate><guid>/about/me/</guid><description>Hello , Rupak this side üôã‚Äç‚ôÇÔ∏è You can find some useful stuffs in Blogs section üòä Don&amp;rsquo;t Go to the notes, it&amp;rsquo;s just for me üò∂‚Äçüå´Ô∏è Checkout my projects, I have some cool stuffs there ( Please give me a ‚≠ê if you like it ) Ignore my socials, I am not much active ü´• Heyyyy, Wanna get in touch? Mail me at : rupakbiswas2304@gmail.com -&amp;gt; Primary Email ID
rupak_2001cs57@iitp.ac.in -&amp;gt; University Mail ID</description></item><item><title>4 Register Assembler and Emulator</title><link>/projects/labcompilor/</link><pubDate>Tue, 20 Dec 2022 09:03:20 -0800</pubDate><guid>/projects/labcompilor/</guid><description>TITLE: 4 Register Assembler and Emulator Author: RUPAK BISWAS Date: 2021-09-16 Files: *All the files i submitted, asm.c and emu.c and claims.txt, have my name and student id at the start, along with a declaration of authorship.
The evidence for Assembler including the output files from the X (eg five) test examples has also been uploaded. They are test1(3 output files), test2(3 output files), test3 (1 output file), memcpy(3 output files) and triangle(3 output files).</description></item><item><title>AWS Django Deployment</title><link>/notes/deploy-django/</link><pubDate>Tue, 20 Dec 2022 09:03:20 -0800</pubDate><guid>/notes/deploy-django/</guid><description>Deploying a Django application in VM For development server we can use the built-in Django server. But for production we need to use a web server like Apache or Nginx. In this tutorial we will use Nginx.
For safety create a new production branch in git and push it to the server. git branch prod
git checkout prod
git push origin prod Now we have to install gunicorn then we can call it directly pip install gunicorn Our project have a wsgi.</description></item><item><title>ESP-IDF Installation</title><link>/blog/esp32/installation/</link><pubDate>Tue, 20 Dec 2022 09:03:20 -0800</pubDate><guid>/blog/esp32/installation/</guid><description>Installation of ESP-IDF (windows)
Install ESP-IDF installer from here For linux and mac get it from here Goto here for brief installation guide Open installer and check all the check all the checkbox and do a default installation How to flash microPython firmware in esp32 [ linux &amp;amp; windows ]
go to micropython offical site
Select esp32 or any other board if you are using
make sure to have esptool.py installed or do pip install esptool instead</description></item><item><title>ESP-RECON</title><link>/projects/esp-recon/</link><pubDate>Tue, 20 Dec 2022 09:03:20 -0800</pubDate><guid>/projects/esp-recon/</guid><description>Handwritten Digit Recognition The goal of the project is to implement CNN based digit-recognition system in a edge and resource constrained device. More specifically, I used a esp32-cam module, which have 2mp camera, 512kb RAM and 4Mb flash memory. My object is to capture image in a loop, crop that image, send to the cnn model‚Äôs input tensor, run the model ( invoke ) and output the result based on maximum probability returned</description></item><item><title>ESP32 Blink</title><link>/blog/esp32/blink/</link><pubDate>Tue, 20 Dec 2022 09:03:20 -0800</pubDate><guid>/blog/esp32/blink/</guid><description>Simple Blink Led in ESP32 As we have successfully managed to install ESP-IDF we can start coding and uploading in ESP32.
We will follow the bellow file structure
main |--&amp;gt; CMakeLists.txt |--&amp;gt; component.mk |--&amp;gt; main.cpp |--&amp;gt; additional-files.cpp |--&amp;gt; additional-header-files.cpp CMakeLists.txt example_test.py README.md Create a project folder and enter in the folder Create all the files mentioned above</description></item><item><title>ESP32-OLED</title><link>/blog/esp32/oledmpy/</link><pubDate>Tue, 20 Dec 2022 09:03:20 -0800</pubDate><guid>/blog/esp32/oledmpy/</guid><description>OLED with MicroPython on ESP32 Connection VCC to 3.3V GND to GND SCL/SCK to GPIO22 SDA to GPIO21 Installations Need to install SSD1306 OLED Library Open Editor ( Thonny or uPyCraft ) Create a file named ssd1306.py Copy the code from here Save the file Code Imports &amp;ndash;&amp;gt; from machine import Pin, SoftI2C
import ssd1306
from time import sleep Create I2C object &amp;ndash;&amp;gt; i2c = SoftI2C(scl=Pin(22), sda=Pin(21)) Create OLED object &amp;ndash;&amp;gt; oled_width = 128
oled_height = 64
oled = ssd1306.</description></item><item><title>ESPNOW (Micropython)</title><link>/blog/esp32/espnow/</link><pubDate>Tue, 20 Dec 2022 09:03:20 -0800</pubDate><guid>/blog/esp32/espnow/</guid><description>ESP-NOW [ micropython ] Installation This module is not available in the default firmware To install this module we need to flash percompiled firmware (with esp-now module) or compile the firmware from source To flash precompiled firmware, download the firmware from here source code How to flash ? go to this link Sender Code import network import espnow # A WLAN interface must be active to send()/recv() sta = network.WLAN(network.STA_IF) # Or network.</description></item><item><title>FILE-AUTH</title><link>/projects/fileauth/</link><pubDate>Tue, 20 Dec 2022 09:03:20 -0800</pubDate><guid>/projects/fileauth/</guid><description>File-Auth Codepeak 2021 Open source
A secure-authentication system which verifies users by verifying an uploaded file.
Advantages Hard/near-impossible to bruteforce. No need to remember password. Even if somebody sees your file they can&amp;rsquo;t get access to the account. Storage space doesn&amp;rsquo;t depend on the file size. Reduces working time &amp;amp; increases productivity. Credentials accessible anytime &amp;amp; anywhere with just few clicks. Easy to understand and use for beginners. Highly accessible with low skill gap.</description></item><item><title>Hash Cracking with quantum Computing</title><link>/projects/hash-cracking/</link><pubDate>Tue, 20 Dec 2022 09:03:20 -0800</pubDate><guid>/projects/hash-cracking/</guid><description>CS689 - Assign2 source code
Hash Function The hash function has beed implemented in hash_function.py file. The hash function is based on 8bit Pearson Hash This hash function is safe (if we ignore the hash size) for classical computer. To demonstrate it&amp;rsquo;s safeness, we can plot it for upto certain number and check for any pattern to show up. Usages Run python3 hash_function.py --n 4 --extend 3 --n is the number of bits in the hash --extend means plot will be extended to $(2^n)*extend$ number of points Output The above plot is for 8bit Pearson hash function and it shows randomness.</description></item><item><title>PyGoat</title><link>/projects/pygoat/</link><pubDate>Tue, 20 Dec 2022 09:03:20 -0800</pubDate><guid>/projects/pygoat/</guid><description>PyGoat intentionally vuln web Application Security in django. our roadmap build intentionally vuln web Application in django. The Vulnerability can based on OWASP top ten Table of Contents pygoat Installation From Sources Docker Container Installation Video Uninstallation Solutions For Developers Installation From Sources To setup the project on your local machine: First, Clone the repository using GitHub website or git in Terminal
git clone https://github.com/adeyosemanputra/pygoat.git
### To Download a specific branch
git clone -b &amp;lt;branch_name&amp;gt; https://github.</description></item><item><title>TemplateGen</title><link>/projects/template-gen/</link><pubDate>Tue, 20 Dec 2022 09:03:20 -0800</pubDate><guid>/projects/template-gen/</guid><description>Template Generator: Usage Use this for generating a file on some template. Before start using please change the please mention your template folder path in the config.py file.
For adding template in your template file, use the template extension. For example py1.template is a template file.
Commands : For listing all templates use -l flag. templategen -l For generating a file from a template use -t flag for template name then the file name.</description></item><item><title/><link>/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/project/</guid><description>MY PROJECTS PYGOAT Description: The purpose is to give developers and testers a platform for learning how to test applications and code securely. PyGoat is written in python and uses the Django web framework as a platform. It also has web application vulnerabilities (such as XSS and SQLi). PyGoat also provides a section where you may view the source code, identify the error that led to the vulnerability, and make adjustments to secure it.</description></item></channel></rss>